subset sums
class Solution{
    
    public void subsets(int i,int sum,ArrayList<Integer> arr,int N)
    {
        if(i==N)
        {
            res.add(sum);
            return;
        }
        
        subsets(i+1,sum+arr.get(i),arr,N);
        subsets(i+1,sum,arr,N);
    }
    
    int sum=0;
    ArrayList<Integer>res=new ArrayList<Integer>();
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        // code here
        subsets(0,0,arr,N);
        return res;
    }
}
combination sum
class Solution {

    public void combinations(int[] candidates,int target,int i,ArrayList<Integer>arr)
    {
        if(i==candidates.length)
        {
            if(target==0)
            {
                 res.add(new ArrayList<Integer>(arr));   
            }
            return;
        }

        if(candidates[i]<=target)
        {
            arr.add(candidates[i]);
            combinations(candidates,target-candidates[i],i,arr);
            arr.remove(arr.size()-1);
        }

        combinations(candidates,target,i+1,arr);
    }


    List<List<Integer>>res=new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        combinations(candidates,target,0,new ArrayList<Integer>());
        return res;
    }
}
combination sum 2
class Solution {

    public void combinations2(int[] candidates,int target,int idx,ArrayList<Integer>arr)
    {
        if(target==0)
        {
            res.add(new ArrayList<Integer>(arr));
            return;
        }

        for(int i=idx;i<candidates.length;i++)
        {
            if(i>idx && candidates[i]==candidates[i-1])continue;
            if(candidates[i]>target)break;

            arr.add(candidates[i]);
            combinations2(candidates,target-candidates[i],i+1,arr);
            arr.remove(arr.size()-1);
        }

    }
    List<List<Integer>>res=new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        combinations2(candidates,target,0,new ArrayList<Integer>());
        return res;
    }
}


class Solution {

    public void subsets2(int i,int n,int[] nums,ArrayList<Integer>arr)
    {
        // if(i==n)
        // {
            res.add(new ArrayList<Integer>(arr));
            // return;
        // }

        for(int idx=i;idx<n;idx++)
        {
            if(idx>i && nums[idx]==nums[idx-1])
            {
                continue;
            }
            arr.add(nums[idx]);
            subsets2(idx+1,n,nums,arr);
            arr.remove(arr.size()-1);
        }
    }

    List<List<Integer>>res=new ArrayList<>();
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        subsets2(0,n,nums,new ArrayList<Integer>());
        return res;
    }
}
