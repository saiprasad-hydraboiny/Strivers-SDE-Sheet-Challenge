Nearest Smallest Element
public class Solution {
    public int[] prevSmaller(int[] A) {
        int left[]=new int[A.length];
        Arrays.fill(left,-1);
        Stack<Integer>st=new Stack<>();
        
        for(int i=0;i<A.length;i++)
        {
            while(!st.isEmpty() && st.peek()>=A[i])
            {
                st.pop();
            }//pop untill element is strictly less than A[i]
            if(!st.isEmpty())
            {
                left[i]=st.peek();
            }//store the top element
            st.push(A[i]); //this can be a possible answer for future elements
            
        }
        return left;
    }
}
Implement Min Stack
class MinStack {

    // Stack<Integer>st;
    // Stack<Integer>Min_st;
    // public MinStack() {
    //     st=new Stack<Integer>();
    //     Min_st=new Stack<Integer>();  
    // }

    Stack<Integer>st=new Stack<Integer>();
    Stack<Integer>Min_st=new Stack<Integer>();
    
    public void push(int val) {
        st.push(val);
        if(Min_st.empty())
        {
            
            Min_st.push(val);
        }
        else
        {
            Min_st.push(Math.min(Min_st.peek(),val));
        }
        
    }
    
    public void pop() {
        st.pop();
        Min_st.pop();

        
    }
    
    public int top() {
        return st.peek();
        
    }
    
    public int getMin() {
        return Min_st.peek();
    }
}
Largest Rectangle in Histogram

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int left[]=new int[n];
        int right[]=new int[n];
        Arrays.fill(left,-1);
        Arrays.fill(right,n);

        Stack<Integer>st1=new Stack<>();
        Stack<Integer>st2=new Stack<>();
        for(int i=0;i<n;i++)
        {
            while(!st1.isEmpty() && heights[st1.peek()]>=heights[i])
            {
                st1.pop();
            }
            if(!st1.isEmpty())
            {
                left[i]=st1.peek();
            }
            st1.push(i);
        }
        for(int i=n-1;i>=0;i--)
        {
            while(!st2.isEmpty() && heights[st2.peek()]>=heights[i])
            {
                st2.pop();
            }
            if(!st2.isEmpty())
            {
                right[i]=st2.peek();
            }
            st2.push(i);
        }

        int ans=0;
        for(int i=0;i<heights.length;i++)
        {
            ans=Math.max(ans,(right[i]-left[i]-1)*heights[i]);
        }
        return ans;
        
    }
}
