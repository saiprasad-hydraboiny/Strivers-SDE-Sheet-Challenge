Reverse a Linked List
class Solution {
    public ListNode reverseList(ListNode head) 
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        ListNode rh=reverseList(head.next);
        head.next.next=head;
        head.next=null;
        return rh;
    }
}

Find middle element of Linked List
class Solution {
    public ListNode middleNode(ListNode head) {

        if(head==null)
        {
            return null;
        }
        ListNode s=head;
        ListNode f=head;

        while(f!=null && f.next!=null)
        {
            s=s.next;
            f=f.next.next;
        }
        return s;

        
    }
}

Remove Nth node from End of the List
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast=head;
        for(int i=0;i<n;i++)
        {
            fast=fast.next;
        }

        if(fast==null)
        {
            return head.next;
        }

        ListNode slow=head;
        while(fast.next!=null)
        {
            fast=fast.next;
            slow=slow.next;
        }
        slow.next=slow.next.next;
        return head;
        
    }
}
