Check for balanced parentheses
class Solution {
    public boolean isValid(String s) {
        Stack<Character>st=new Stack();

        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='(' || s.charAt(i)=='[' || s.charAt(i)=='{')
            {
                st.push(s.charAt(i));
            }
            else
            {
                if(st.empty())
                {
                    return false;
                }
                char ch=st.peek();
                st.pop();
                if(!((ch=='(' && s.charAt(i)==')') || (ch=='[' && s.charAt(i)==']')||(ch=='{' && s.charAt(i)=='}')))
                {
                    return false;
                }
            }
        }

        if(st.empty())
        {
            return true;
        }
        return false;

        
    }
}

Next greater Element
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {

        Stack<Integer>st=new Stack<>();
        HashMap<Integer,Integer>hm=new HashMap<Integer,Integer>();
        for(int i=nums2.length-1;i>=0;i--)
        {
            while(!st.isEmpty() && st.peek()<=nums2[i])
            {
                st.pop();
            }

            if(!st.isEmpty())
            {
                hm.put(nums2[i],st.peek());
            }
            else
            {
                hm.put(nums2[i],-1);
            }

            st.push(nums2[i]);
        }

        for(int i=0;i<nums1.length;i++)
        {
            nums1[i]=hm.get(nums1[i]);
        }
        return nums1;
        
    }
}
