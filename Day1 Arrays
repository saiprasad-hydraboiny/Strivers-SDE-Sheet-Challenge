


Next Permutation

class Solution {
    public void nextPermutation(int[] nums) {

        int idx=-1;
        //finding break point from back 
        for(int i=nums.length-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1])
            {
                idx=i;
                break;
            }

        }

        if(idx==-1)
        {
            int s=0;
            int e=nums.length-1;
            while(s<=e)
            {
                int t=nums[s];
                nums[s]=nums[e];
                nums[e]=t;
                s++;
                e--;
            }
        }
        else
        {
            for(int i=nums.length-1;i>=0;i--)
            {
                if(nums[i]>nums[idx])
                {
                    int t=nums[i];
                    nums[i]=nums[idx];
                    nums[idx]=t;
                    break;
                }
            }
            int s=idx+1;
            int e=nums.length-1;
            while(s<=e)
            {
                int t=nums[s];
                nums[s]=nums[e];
                nums[e]=t;
                s++;
                e--;
            }


        }


        
    }
}

Kadane's Alogrithm

class Solution {
    public int maxSubArray(int[] nums) {
        int curr=0;
        int mx_sum=Integer.MIN_VALUE;

        for(int i=0;i<nums.length;i++)
        {
            curr=curr+nums[i];
            if(curr>mx_sum)
            {
                mx_sum=curr;
            }

            if(curr<0)
            {
                curr=0;
            }
        }

        return mx_sum;
        
    }
}

Buy and Sell Stock

class Solution {
    public int maxProfit(int[] prices) {
        int profit=0;
        int min=prices[0];
        for(int i=1;i<prices.length;i++)
        {
            int cost= prices[i]-min;

            profit=Math.max(profit,cost);

            if(prices[i]<min)
            {
                min=prices[i];
            }

        }

        return profit;
        
    }
}
