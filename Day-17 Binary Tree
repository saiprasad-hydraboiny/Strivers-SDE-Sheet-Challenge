Inorder Traversal
class Solution {
    public void inOrder(TreeNode root) {
        if(root==null)
        {
            return;
        }
        
        inOrder(root.left);
        res.add(root.val);
        inOrder(root.right);
        
    }
    List<Integer>res=new ArrayList<Integer>();

    public List<Integer> inorderTraversal(TreeNode root) {
        
       inOrder(root);
       return res;
        
    }
}
PreOrder Iterative
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer>preOrder=new ArrayList<>();
        Stack<TreeNode>st=new Stack<>();
        st.push(root);
        if(root==null)
        {
            return preOrder;
        }
        while(!st.isEmpty())
        {
            TreeNode x=st.peek();
            preOrder.add(x.val);
            st.pop();
            if(x.right!=null)
            {
                st.push(x.right);
            }
            if(x.left!=null)
            {
                st.push(x.left);
            }
        }
        return preOrder;
        
    }
}
Post Order 2 stack
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode>st1=new Stack<TreeNode>();
        Stack<TreeNode>st2=new Stack<TreeNode>();
        st1.push(root);
        List<Integer>post=new ArrayList<Integer>();
        if(root==null)
        {
            return post;
        }
        while(!st1.isEmpty())
        {
            TreeNode temp=st1.pop();
            st2.push(temp);
            if(temp.left!=null)
            {
                st1.push(temp.left);
            }
            if(temp.right!=null)
            {
                st1.push(temp.right);
            }
        }
        
        while(!st2.isEmpty())
        {
            post.add(st2.pop().val);
        }
        return post;

        
    }
}
left view
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      Queue<Node>q=new LinkedList<Node>();
      ArrayList<Integer>leftView=new ArrayList<>();
      if(root==null)
      {
          return leftView;
      }
      q.add(root);
      
      while(q.size()>0)
      {
          int qsize=q.size();
          for(int i=1;i<=qsize;i++)
          {
             Node f=q.element();
             q.remove();
             if(i==1)
             {
                 leftView.add(f.data);
             }
             
             if(f.left!=null)
             {
                 q.add(f.left);
             }
             if(f.right!=null)
             {
                 q.add(f.right);
             }
          }
      }
      
      return leftView;
    }
}
